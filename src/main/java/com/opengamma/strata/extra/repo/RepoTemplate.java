/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.extra.repo;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.ReferenceData;
import com.opengamma.strata.basics.ReferenceDataNotFoundException;
import com.opengamma.strata.basics.date.Tenor;
import com.opengamma.strata.product.SecurityPosition;
import com.opengamma.strata.product.TradeTemplate;
import com.opengamma.strata.product.common.BuySell;

/**
 * A template for creating a repo trade.
 * <p>
 * This defines almost all the data necessary to create a {@link Repo}.
 * The trade date, notional and fixed rate are required to complete the template and create the trade.
 * As such, it is often possible to get a market price for a trade based on the template.
 * <p>
 * The template is defined by three dates.
 * <ul>
 * <li>Trade date, the date that the trade is agreed
 * <li>Start date or spot date, the date on which the repo starts
 * <li>End date, the date on which the repo ends
 * </ul>
 */
@BeanDefinition
public final class RepoTemplate
    implements TradeTemplate, ImmutableBean, Serializable {

  /**
   * The tenor between the start date and the end date.
   */
  @PropertyDefinition(validate = "notNull")
  private final Tenor tenor;
  /**
   * The collateral of the repo.
   * <p>
   * The collateral is a single security for special repos whereas it is a set of securities for general repos.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<SecurityPosition> collateral;
  /**
   * The underlying repo convention. 
   * <p>
   * This specifies the standard convention of the repo to be created.
   */
  @PropertyDefinition(validate = "notNull")
  private final RepoConvention convention;

  //-------------------------------------------------------------------------
  /**
   * Obtains a template based on the specified period and convention.
   * 
   * @param tenor  the tenor between the start date and the end date
   * @param collateral  the collateral
   * @param convention  the market convention
   * @return the template
   */
  public static RepoTemplate of(Tenor tenor, List<SecurityPosition> collateral, RepoConvention convention) {
    return new RepoTemplate(tenor, collateral, convention);
  }

  //-------------------------------------------------------------------------
  /**
   * Creates a trade based on this template.
   * <p>
   * This returns a trade based on the specified date.
   * The notional is unsigned, with buy/sell determining the direction of the trade.
   * If buying the repo, the principal is paid at the start date and the
   * principal plus interest is received at the end date.
   * If selling the repo, the principal is received at the start date and the
   * principal plus interest is paid at the end date.
   * 
   * @param tradeDate  the date of the trade
   * @param buySell  the buy/sell flag, see {@link Repo#getBuySell()}
   * @param notional  the notional amount, in the payment currency of the template
   * @param rate  the fixed rate, typically derived from the market
   * @param refData  the reference data, used to resolve the trade dates
   * @return the trade
   * @throws ReferenceDataNotFoundException if an identifier cannot be resolved in the reference data
   */
  public RepoTrade createTrade(
      LocalDate tradeDate,
      BuySell buySell,
      double notional,
      double rate,
      ReferenceData refData) {

    return convention.createTrade(tradeDate, tenor, collateral, buySell, notional, rate, refData);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code RepoTemplate}.
   * @return the meta-bean, not null
   */
  public static RepoTemplate.Meta meta() {
    return RepoTemplate.Meta.INSTANCE;
  }

  static {
    MetaBean.register(RepoTemplate.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static RepoTemplate.Builder builder() {
    return new RepoTemplate.Builder();
  }

  private RepoTemplate(
      Tenor tenor,
      List<SecurityPosition> collateral,
      RepoConvention convention) {
    JodaBeanUtils.notNull(tenor, "tenor");
    JodaBeanUtils.notNull(collateral, "collateral");
    JodaBeanUtils.notNull(convention, "convention");
    this.tenor = tenor;
    this.collateral = ImmutableList.copyOf(collateral);
    this.convention = convention;
  }

  @Override
  public RepoTemplate.Meta metaBean() {
    return RepoTemplate.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the tenor between the start date and the end date.
   * @return the value of the property, not null
   */
  public Tenor getTenor() {
    return tenor;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the collateral of the repo.
   * <p>
   * The collateral is a single security for special repos whereas it is a set of securities for general repos.
   * @return the value of the property, not null
   */
  public ImmutableList<SecurityPosition> getCollateral() {
    return collateral;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying repo convention.
   * <p>
   * This specifies the standard convention of the repo to be created.
   * @return the value of the property, not null
   */
  public RepoConvention getConvention() {
    return convention;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RepoTemplate other = (RepoTemplate) obj;
      return JodaBeanUtils.equal(tenor, other.tenor) &&
          JodaBeanUtils.equal(collateral, other.collateral) &&
          JodaBeanUtils.equal(convention, other.convention);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(tenor);
    hash = hash * 31 + JodaBeanUtils.hashCode(collateral);
    hash = hash * 31 + JodaBeanUtils.hashCode(convention);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("RepoTemplate{");
    buf.append("tenor").append('=').append(tenor).append(',').append(' ');
    buf.append("collateral").append('=').append(collateral).append(',').append(' ');
    buf.append("convention").append('=').append(JodaBeanUtils.toString(convention));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RepoTemplate}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code tenor} property.
     */
    private final MetaProperty<Tenor> tenor = DirectMetaProperty.ofImmutable(
        this, "tenor", RepoTemplate.class, Tenor.class);
    /**
     * The meta-property for the {@code collateral} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<SecurityPosition>> collateral = DirectMetaProperty.ofImmutable(
        this, "collateral", RepoTemplate.class, (Class) ImmutableList.class);
    /**
     * The meta-property for the {@code convention} property.
     */
    private final MetaProperty<RepoConvention> convention = DirectMetaProperty.ofImmutable(
        this, "convention", RepoTemplate.class, RepoConvention.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "tenor",
        "collateral",
        "convention");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110246592:  // tenor
          return tenor;
        case -1840567753:  // collateral
          return collateral;
        case 2039569265:  // convention
          return convention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public RepoTemplate.Builder builder() {
      return new RepoTemplate.Builder();
    }

    @Override
    public Class<? extends RepoTemplate> beanType() {
      return RepoTemplate.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code tenor} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Tenor> tenor() {
      return tenor;
    }

    /**
     * The meta-property for the {@code collateral} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<SecurityPosition>> collateral() {
      return collateral;
    }

    /**
     * The meta-property for the {@code convention} property.
     * @return the meta-property, not null
     */
    public MetaProperty<RepoConvention> convention() {
      return convention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 110246592:  // tenor
          return ((RepoTemplate) bean).getTenor();
        case -1840567753:  // collateral
          return ((RepoTemplate) bean).getCollateral();
        case 2039569265:  // convention
          return ((RepoTemplate) bean).getConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code RepoTemplate}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<RepoTemplate> {

    private Tenor tenor;
    private List<SecurityPosition> collateral = ImmutableList.of();
    private RepoConvention convention;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(RepoTemplate beanToCopy) {
      this.tenor = beanToCopy.getTenor();
      this.collateral = beanToCopy.getCollateral();
      this.convention = beanToCopy.getConvention();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 110246592:  // tenor
          return tenor;
        case -1840567753:  // collateral
          return collateral;
        case 2039569265:  // convention
          return convention;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 110246592:  // tenor
          this.tenor = (Tenor) newValue;
          break;
        case -1840567753:  // collateral
          this.collateral = (List<SecurityPosition>) newValue;
          break;
        case 2039569265:  // convention
          this.convention = (RepoConvention) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public RepoTemplate build() {
      return new RepoTemplate(
          tenor,
          collateral,
          convention);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the tenor between the start date and the end date.
     * @param tenor  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder tenor(Tenor tenor) {
      JodaBeanUtils.notNull(tenor, "tenor");
      this.tenor = tenor;
      return this;
    }

    /**
     * Sets the collateral of the repo.
     * <p>
     * The collateral is a single security for special repos whereas it is a set of securities for general repos.
     * @param collateral  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder collateral(List<SecurityPosition> collateral) {
      JodaBeanUtils.notNull(collateral, "collateral");
      this.collateral = collateral;
      return this;
    }

    /**
     * Sets the {@code collateral} property in the builder
     * from an array of objects.
     * @param collateral  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder collateral(SecurityPosition... collateral) {
      return collateral(ImmutableList.copyOf(collateral));
    }

    /**
     * Sets the underlying repo convention.
     * <p>
     * This specifies the standard convention of the repo to be created.
     * @param convention  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder convention(RepoConvention convention) {
      JodaBeanUtils.notNull(convention, "convention");
      this.convention = convention;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("RepoTemplate.Builder{");
      buf.append("tenor").append('=').append(JodaBeanUtils.toString(tenor)).append(',').append(' ');
      buf.append("collateral").append('=').append(JodaBeanUtils.toString(collateral)).append(',').append(' ');
      buf.append("convention").append('=').append(JodaBeanUtils.toString(convention));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
