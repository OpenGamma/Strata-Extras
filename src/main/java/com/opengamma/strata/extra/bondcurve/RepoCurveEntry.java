/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.extra.bondcurve;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.collect.Messages;
import com.opengamma.strata.collect.tuple.Pair;
import com.opengamma.strata.market.curve.CurveName;
import com.opengamma.strata.market.curve.RepoGroup;

/**
 * A single repo curve entry in the curve group definition.
 * <p>
 * Each entry stores the definition of a single curve and how it is to be used.
 * This structure allows the curve itself to be used for multiple purposes.
 */
@BeanDefinition
public final class RepoCurveEntry
    implements ImmutableBean, Serializable {

  /**
   * The curve name.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurveName curveName;
  /**
   * The repo curve groups and currencies for which the curve provides discount rates.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableSet<Pair<RepoGroup, Currency>> repoCurveGroups;

  //-------------------------------------------------------------------------
  /**
   * Creates an instance.
   * 
   * @param curveName  the curve name
   * @param repoCurveGroups  the repo curve groups
   * @return the instance
   */
  public static RepoCurveEntry of(CurveName curveName, Set<Pair<RepoGroup, Currency>> repoCurveGroups) {
    return new RepoCurveEntry(curveName, repoCurveGroups);
  }

  //-------------------------------------------------------------------------
  /**
   * Merges the specified entry with this entry, returning a new entry.
   * <p>
   * The two entries must have the same curve name.
   *
   * @param newEntry  the new entry
   * @return the merged entry
   */
  public RepoCurveEntry merge(RepoCurveEntry newEntry) {
    if (!curveName.equals(newEntry.getCurveName())) {
      throw new IllegalArgumentException(Messages.format(
          "Unable to merge, curve names differ: {} and {}", curveName, newEntry.getCurveName()));
    }
    return RepoCurveEntry.builder()
        .curveName(curveName)
        .repoCurveGroups(Sets.union(repoCurveGroups, newEntry.repoCurveGroups))
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code RepoCurveEntry}.
   * @return the meta-bean, not null
   */
  public static RepoCurveEntry.Meta meta() {
    return RepoCurveEntry.Meta.INSTANCE;
  }

  static {
    MetaBean.register(RepoCurveEntry.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static RepoCurveEntry.Builder builder() {
    return new RepoCurveEntry.Builder();
  }

  private RepoCurveEntry(
      CurveName curveName,
      Set<Pair<RepoGroup, Currency>> repoCurveGroups) {
    JodaBeanUtils.notNull(curveName, "curveName");
    JodaBeanUtils.notNull(repoCurveGroups, "repoCurveGroups");
    this.curveName = curveName;
    this.repoCurveGroups = ImmutableSet.copyOf(repoCurveGroups);
  }

  @Override
  public RepoCurveEntry.Meta metaBean() {
    return RepoCurveEntry.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve name.
   * @return the value of the property, not null
   */
  public CurveName getCurveName() {
    return curveName;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the repo curve groups and currencies for which the curve provides discount rates.
   * @return the value of the property, not null
   */
  public ImmutableSet<Pair<RepoGroup, Currency>> getRepoCurveGroups() {
    return repoCurveGroups;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RepoCurveEntry other = (RepoCurveEntry) obj;
      return JodaBeanUtils.equal(curveName, other.curveName) &&
          JodaBeanUtils.equal(repoCurveGroups, other.repoCurveGroups);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(curveName);
    hash = hash * 31 + JodaBeanUtils.hashCode(repoCurveGroups);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("RepoCurveEntry{");
    buf.append("curveName").append('=').append(curveName).append(',').append(' ');
    buf.append("repoCurveGroups").append('=').append(JodaBeanUtils.toString(repoCurveGroups));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RepoCurveEntry}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveName} property.
     */
    private final MetaProperty<CurveName> curveName = DirectMetaProperty.ofImmutable(
        this, "curveName", RepoCurveEntry.class, CurveName.class);
    /**
     * The meta-property for the {@code repoCurveGroups} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableSet<Pair<RepoGroup, Currency>>> repoCurveGroups = DirectMetaProperty.ofImmutable(
        this, "repoCurveGroups", RepoCurveEntry.class, (Class) ImmutableSet.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curveName",
        "repoCurveGroups");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return curveName;
        case -1279842095:  // repoCurveGroups
          return repoCurveGroups;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public RepoCurveEntry.Builder builder() {
      return new RepoCurveEntry.Builder();
    }

    @Override
    public Class<? extends RepoCurveEntry> beanType() {
      return RepoCurveEntry.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveName> curveName() {
      return curveName;
    }

    /**
     * The meta-property for the {@code repoCurveGroups} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableSet<Pair<RepoGroup, Currency>>> repoCurveGroups() {
      return repoCurveGroups;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return ((RepoCurveEntry) bean).getCurveName();
        case -1279842095:  // repoCurveGroups
          return ((RepoCurveEntry) bean).getRepoCurveGroups();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code RepoCurveEntry}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<RepoCurveEntry> {

    private CurveName curveName;
    private Set<Pair<RepoGroup, Currency>> repoCurveGroups = ImmutableSet.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(RepoCurveEntry beanToCopy) {
      this.curveName = beanToCopy.getCurveName();
      this.repoCurveGroups = beanToCopy.getRepoCurveGroups();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return curveName;
        case -1279842095:  // repoCurveGroups
          return repoCurveGroups;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          this.curveName = (CurveName) newValue;
          break;
        case -1279842095:  // repoCurveGroups
          this.repoCurveGroups = (Set<Pair<RepoGroup, Currency>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public RepoCurveEntry build() {
      return new RepoCurveEntry(
          curveName,
          repoCurveGroups);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the curve name.
     * @param curveName  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder curveName(CurveName curveName) {
      JodaBeanUtils.notNull(curveName, "curveName");
      this.curveName = curveName;
      return this;
    }

    /**
     * Sets the repo curve groups and currencies for which the curve provides discount rates.
     * @param repoCurveGroups  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder repoCurveGroups(Set<Pair<RepoGroup, Currency>> repoCurveGroups) {
      JodaBeanUtils.notNull(repoCurveGroups, "repoCurveGroups");
      this.repoCurveGroups = repoCurveGroups;
      return this;
    }

    /**
     * Sets the {@code repoCurveGroups} property in the builder
     * from an array of objects.
     * @param repoCurveGroups  the new value, not null
     * @return this, for chaining, not null
     */
    @SafeVarargs
    public final Builder repoCurveGroups(Pair<RepoGroup, Currency>... repoCurveGroups) {
      return repoCurveGroups(ImmutableSet.copyOf(repoCurveGroups));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("RepoCurveEntry.Builder{");
      buf.append("curveName").append('=').append(JodaBeanUtils.toString(curveName)).append(',').append(' ');
      buf.append("repoCurveGroups").append('=').append(JodaBeanUtils.toString(repoCurveGroups));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
