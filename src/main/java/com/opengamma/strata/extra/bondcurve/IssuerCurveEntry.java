/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.extra.bondcurve;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.collect.Messages;
import com.opengamma.strata.collect.tuple.Pair;
import com.opengamma.strata.market.curve.CurveName;
import com.opengamma.strata.market.curve.LegalEntityGroup;

/**
 * A single issuer curve entry in the legal entity discounting curve group definition.
 * <p>
 * Each entry stores the definition of a single curve and how it is to be used.
 */
@BeanDefinition
public final class IssuerCurveEntry
    implements ImmutableBean, Serializable {

  /**
   * The curve name.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurveName curveName;
  /**
   * The issuer curve groups and currencies for which the curve provides discount rates.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableSet<Pair<LegalEntityGroup, Currency>> issuerCurveGroups;

  //-------------------------------------------------------------------------
  /**
   * Creates an instance.
   *
   * @param curveName  the curve name
   * @param issuerCurveGroups  the issuer curve groups
   * @return the instance
   */
  public static IssuerCurveEntry of(CurveName curveName, Set<Pair<LegalEntityGroup, Currency>> issuerCurveGroups) {
    return new IssuerCurveEntry(curveName, issuerCurveGroups);
  }

  //-------------------------------------------------------------------------
  /**
   * Merges the specified entry with this entry, returning a new entry.
   * <p>
   * The two entries must have the same curve name.
   * 
   * @param newEntry  the new entry
   * @return the merged entry
   */
  public IssuerCurveEntry merge(IssuerCurveEntry newEntry) {
    if (!curveName.equals(newEntry.getCurveName())) {
      throw new IllegalArgumentException(Messages.format(
          "Unable to merge, curve names differ: {} and {}", curveName, newEntry.getCurveName()));
    }
    return IssuerCurveEntry.builder()
        .curveName(curveName)
        .issuerCurveGroups(Sets.union(issuerCurveGroups, newEntry.issuerCurveGroups))
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code IssuerCurveEntry}.
   * @return the meta-bean, not null
   */
  public static IssuerCurveEntry.Meta meta() {
    return IssuerCurveEntry.Meta.INSTANCE;
  }

  static {
    MetaBean.register(IssuerCurveEntry.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IssuerCurveEntry.Builder builder() {
    return new IssuerCurveEntry.Builder();
  }

  private IssuerCurveEntry(
      CurveName curveName,
      Set<Pair<LegalEntityGroup, Currency>> issuerCurveGroups) {
    JodaBeanUtils.notNull(curveName, "curveName");
    JodaBeanUtils.notNull(issuerCurveGroups, "issuerCurveGroups");
    this.curveName = curveName;
    this.issuerCurveGroups = ImmutableSet.copyOf(issuerCurveGroups);
  }

  @Override
  public IssuerCurveEntry.Meta metaBean() {
    return IssuerCurveEntry.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve name.
   * @return the value of the property, not null
   */
  public CurveName getCurveName() {
    return curveName;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the issuer curve groups and currencies for which the curve provides discount rates.
   * @return the value of the property, not null
   */
  public ImmutableSet<Pair<LegalEntityGroup, Currency>> getIssuerCurveGroups() {
    return issuerCurveGroups;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IssuerCurveEntry other = (IssuerCurveEntry) obj;
      return JodaBeanUtils.equal(curveName, other.curveName) &&
          JodaBeanUtils.equal(issuerCurveGroups, other.issuerCurveGroups);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(curveName);
    hash = hash * 31 + JodaBeanUtils.hashCode(issuerCurveGroups);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("IssuerCurveEntry{");
    buf.append("curveName").append('=').append(curveName).append(',').append(' ');
    buf.append("issuerCurveGroups").append('=').append(JodaBeanUtils.toString(issuerCurveGroups));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IssuerCurveEntry}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveName} property.
     */
    private final MetaProperty<CurveName> curveName = DirectMetaProperty.ofImmutable(
        this, "curveName", IssuerCurveEntry.class, CurveName.class);
    /**
     * The meta-property for the {@code issuerCurveGroups} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableSet<Pair<LegalEntityGroup, Currency>>> issuerCurveGroups = DirectMetaProperty.ofImmutable(
        this, "issuerCurveGroups", IssuerCurveEntry.class, (Class) ImmutableSet.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curveName",
        "issuerCurveGroups");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return curveName;
        case 1830129450:  // issuerCurveGroups
          return issuerCurveGroups;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IssuerCurveEntry.Builder builder() {
      return new IssuerCurveEntry.Builder();
    }

    @Override
    public Class<? extends IssuerCurveEntry> beanType() {
      return IssuerCurveEntry.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveName> curveName() {
      return curveName;
    }

    /**
     * The meta-property for the {@code issuerCurveGroups} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableSet<Pair<LegalEntityGroup, Currency>>> issuerCurveGroups() {
      return issuerCurveGroups;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return ((IssuerCurveEntry) bean).getCurveName();
        case 1830129450:  // issuerCurveGroups
          return ((IssuerCurveEntry) bean).getIssuerCurveGroups();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IssuerCurveEntry}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<IssuerCurveEntry> {

    private CurveName curveName;
    private Set<Pair<LegalEntityGroup, Currency>> issuerCurveGroups = ImmutableSet.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(IssuerCurveEntry beanToCopy) {
      this.curveName = beanToCopy.getCurveName();
      this.issuerCurveGroups = beanToCopy.getIssuerCurveGroups();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return curveName;
        case 1830129450:  // issuerCurveGroups
          return issuerCurveGroups;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          this.curveName = (CurveName) newValue;
          break;
        case 1830129450:  // issuerCurveGroups
          this.issuerCurveGroups = (Set<Pair<LegalEntityGroup, Currency>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public IssuerCurveEntry build() {
      return new IssuerCurveEntry(
          curveName,
          issuerCurveGroups);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the curve name.
     * @param curveName  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder curveName(CurveName curveName) {
      JodaBeanUtils.notNull(curveName, "curveName");
      this.curveName = curveName;
      return this;
    }

    /**
     * Sets the issuer curve groups and currencies for which the curve provides discount rates.
     * @param issuerCurveGroups  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder issuerCurveGroups(Set<Pair<LegalEntityGroup, Currency>> issuerCurveGroups) {
      JodaBeanUtils.notNull(issuerCurveGroups, "issuerCurveGroups");
      this.issuerCurveGroups = issuerCurveGroups;
      return this;
    }

    /**
     * Sets the {@code issuerCurveGroups} property in the builder
     * from an array of objects.
     * @param issuerCurveGroups  the new value, not null
     * @return this, for chaining, not null
     */
    @SafeVarargs
    public final Builder issuerCurveGroups(Pair<LegalEntityGroup, Currency>... issuerCurveGroups) {
      return issuerCurveGroups(ImmutableSet.copyOf(issuerCurveGroups));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("IssuerCurveEntry.Builder{");
      buf.append("curveName").append('=').append(JodaBeanUtils.toString(curveName)).append(',').append(' ');
      buf.append("issuerCurveGroups").append('=').append(JodaBeanUtils.toString(issuerCurveGroups));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
